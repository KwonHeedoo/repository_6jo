<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.scit6jo.web.dao.CommentMapper">
	<sql id="basicCols">
		c.commentnum as commentNum 
		, c.userid as userid
		, c.nickname as nickname
		, u.imgfilepath as imgFilePath
		, c.boardnum as boardNum
		, c.comments as comments
		, to_char(c.regdate, 'YYYY-MM-DD HH24:MI') as regdate
		, c.parentid as parentId
		, c.parentnick as parentNick
		, c.groupnum as groupNum
	</sql>
	
	<!-- 코멘트 리스트 요청 -->
	<select id="selectAll" parameterType="map" resultType="Comment">
		select
			<include refid="basicCols"/>
			<choose>
				<when test="boardType == 'matching'">, c.matchingid as matchingId</when>
				<when test="boardType == 'appraise'">, c.pronunciation as pronunciation
													 , c.contents as contents
													 , c.posture as posture</when>
			</choose>
		from
		<choose>
			<when test="boardType == 'matching'">matching_comment c, userlist u</when>
			<when test="boardType == 'notice'">notice_comment c, userlist u</when>
			<when test="boardType == 'appraise'">appraise_comment c, userlist u</when>
		</choose>
		where
			c.userid = u.userid
		and
			boardnum = #{boardNum}
		order by
			groupnum
			, commentnum
	</select>
	
	<!-- 코멘트 작성 -->
	<insert id="insertComment" parameterType="map">
		insert into 
		<choose>
			<when test="boardType == 'matching'">matching_comment</when>
			<when test="boardType == 'notice'">notice_comment</when>
			<when test="boardType == 'appraise'">appraise_comment</when>
		</choose>
			( commentnum
			, userid
			, nickname
			, boardnum
			, comments
			, parentid
			, parentnick
			, groupnum
			<choose>
				<when test="boardType == 'appraise'">, pronunciation, contents, posture</when>
			</choose>)
		values(
			<choose>
				<when test="boardType == 'matching'">mc_commentnum_seq.nextVal</when>
				<when test="boardType == 'notice'">nc_commentnum_seq.nextVal</when>
				<when test="boardType == 'appraise'">ac_commentnum_seq.nextVal</when>
			</choose>
			, #{comment.userid}
			, #{comment.nickname}
			, #{comment.boardNum}
			, #{comment.comments}
			, #{comment.parentId}
			, #{comment.parentNick}
			<if test="comment.parentId == null">
			<choose>
				<when test="boardType == 'matching'">, mc_groupnum_seq.nextVal</when>
				<when test="boardType == 'notice'">, nc_groupnum_seq.nextVal</when>
				<when test="boardType == 'appraise'">, ac_groupnum_seq.nextVal</when>
			</choose>
			</if>
			<if test="comment.parentId != null">, #{comment.groupNum}</if>
			<if test="boardType == 'appraise'"> , #{comment.pronunciation}
												, #{comment.contents}
												, #{comment.posture}
			</if>)
	</insert>
	
	<!-- 코멘트 수정 -->
	<update id="updateComment" parameterType="map">
		update
		<choose>
			<when test="boardType == 'matching'">matching_comment</when>
			<when test="boardType == 'notice'">notice_comment</when>
			<when test="boardType == 'appraise'">appraise_comment</when>
		</choose>
		set
			comments = #{comment.comments}
			, regdate = sysdate
			<!-- 삭제로 인한 코멘트 수정 시 check값이 false -->
			<if test="check == false">
			, userid = #{comment.userid}
			, nickname = #{comment.nickname}
			</if>
		where
			commentnum = #{comment.commentNum}
	</update>
	
	<!-- 코멘트 삭제 -->
	<delete id="deleteComment" parameterType="map">
		delete from
		<choose>
			<when test="boardType == 'matching'">matching_comment</when>
			<when test="boardType == 'notice'">notice_comment</when>
			<when test="boardType == 'appraise'">appraise_comment</when>
		</choose>
		where
			commentnum = #{commentNum}
	</delete>
	
	<!-- 코멘트 하나 요청 -->
	<select id="selectOne" parameterType="map" resultType="Comment">
		select
			<include refid="basicCols"/>
			<choose>
				<when test="boardType == 'matching'">, c.matchingid as matchingId</when>
				<when test="boardType == 'appraise'">, c.pronunciation as pronunciation
													 , c.contents as contents
													 , c.posture as posture</when>
			</choose>
		from
		<choose>
			<when test="boardType == 'matching'">matching_comment c, userlist u</when>
			<when test="boardType == 'notice'">notice_comment, userlist u</when>
			<when test="boardType == 'appraise'">appraise_comment, userlist u</when>
		</choose>
		where
			c.userid = u.userid
		<if test="check == true">
		and
			groupnum = #{groupNum}
		and 
			parentid is not null
		and
			rownum = 1
		</if>
		<if test="check == false">
		and
			groupnum = #{groupNum} 
		and
			parentid is null
		</if>
	</select>
	
	<!-- 매칭 여부 처리 -->
	<update id="matching" parameterType="map">
		update
			matching_comment
		set
			matchingid = #{comment.matchingId}
		where
			commentnum = #{comment.commentNum}
	</update>
	
	<select id="selectRatingAvg" parameterType="Board" resultType="Comment">
		select
    		Round(avg(pronunciation),1) as pronunciation
    		, Round(avg(posture),1) as posture
    		, Round(avg(contents),1) as contents
		from
    		appraise_comment
		where
    		userid != #{userid} 
    	and 
    		parentid is null 
    	and 
    		boardNum = #{boardNum}
	</select>
	
</mapper>
